use std::str::FromStr;

use ast::{Expr, BinaryOpcode, UnaryOpcode};

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::BinOp(<>)),
    Factor,
};

ExprOp: BinaryOpcode = {
    "+" => BinaryOpcode::Addition,
    "-" => BinaryOpcode::Subtraction,
}

Factor: Box<Expr> = {
    Factor FactorOp ExpTerm => Box::new(Expr::BinOp(<>)),
    ExpTerm,
};

FactorOp: BinaryOpcode = {
    "*" => BinaryOpcode::Multiplication,
    "/" => BinaryOpcode::Division,
    "%" => BinaryOpcode::Modulo,
}


ExpTerm: Box<Expr> = {
    Term ExpTermOp ExpTerm => Box::new(Expr::BinOp(<>)),
    Term,
};

ExpTermOp: BinaryOpcode = {
    "^" => BinaryOpcode::Exponentiation,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Num(<>)),
    "(" <Expr> ")",
    TermOp Term => Box::new(Expr::UnOp(<>)),
};

TermOp: UnaryOpcode = {
    "-" => UnaryOpcode::Negation,
}

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};
