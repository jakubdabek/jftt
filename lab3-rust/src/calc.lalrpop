use std::str::FromStr;
use std::convert::TryInto;
use num::pow;
use num::integer::{div_floor,mod_floor};

grammar;

pub Expr: i32 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: i32 = {
    <l:Factor> "*" <r:ExpTerm> => l * r,
    <l:Factor> "/" <r:ExpTerm> => div_floor(l, r),
    <l:Factor> "%" <r:ExpTerm> => mod_floor(l, r),
    ExpTerm,
};

ExpTerm: i32 = {
    <l:Term> "^" <r:ExpTerm> => pow(l, r.try_into().unwrap()),
    Term,
};

Term: i32 = {
    Num,
    "(" <Expr> ")",
    "-" <Term> => -<>,
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};
