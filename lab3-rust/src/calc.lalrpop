use std::str::FromStr;

use ast::{Expr, BinaryOpcode, UnaryOpcode};

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::BinOp(<>)),
    Factor,
};

ExprOp: BinaryOpcode = {
    "+" => BinaryOpcode::Addition,
    "-" => BinaryOpcode::Subtraction,
};

Factor: Box<Expr> = {
    Factor FactorOp UnaryTerm => Box::new(Expr::BinOp(<>)),
    UnaryTerm,
};

FactorOp: BinaryOpcode = {
    "*" => BinaryOpcode::Multiplication,
    "/" => BinaryOpcode::Division,
    "%" => BinaryOpcode::Modulo,
};

UnaryTerm: Box<Expr> = {
    UnaryOp UnaryTerm => Box::new(Expr::UnOp(<>)),
    ExpTerm,
};

UnaryOp: UnaryOpcode = {
    "-" => UnaryOpcode::Negation,
};

ExpTerm: Box<Expr> = {
    // Term ExpTermOp UnaryTerm => Box::new(Expr::BinOp(<>)), // enable x^-x
    Term ExpTermOp ExpTerm => Box::new(Expr::BinOp(<>)), // disable x^-x
    Term,
};

ExpTermOp: BinaryOpcode = {
    "^" => BinaryOpcode::Exponentiation,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Num(<>)),
    "(" <Expr> ")",
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};
